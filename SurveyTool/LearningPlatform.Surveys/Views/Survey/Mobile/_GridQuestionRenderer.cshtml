@using LearningPlatform.Domain.SurveyExecution.Options
@using LearningPlatform.Domain.SurveyExecution.Questions
@using LearningPlatform.Domain.Constants
@using LearningPlatform.Helpers
@model GridQuestion


@helper RenderUserInputArea()
{
    if (Model.ShowAsList)
    {
        @RenderAsList()
    }
    else
    {
        if (Model.Type == QuestionTypeConstants.SingleSelectionGrid)
        {
            @RenderSingleSelectionGridVertical()
        }
        else if (Model.Type == QuestionTypeConstants.MultipleSelectionGrid)
        {
            @RenderMultipleSelectionGridVertical()
        }
        else
        {
            @RenderAsTable()
        }
    }
}

@QuestionRenderer.RenderQuestion(Html, Model, RenderUserInputArea())

@helper RenderAsTable()
{
var firstQuestion = Model.Questions.First() as ScaleQuestion;
var isRenderAsButton = firstQuestion != null && firstQuestion.IsRenderOptionByButton;
    <table id="@Model.Alias-selection-grid-horizontal" class="grid-selection @SetCssClassForQuestionType() @(isRenderAsButton ? "render-as-button" : "")">
        @if (Model is ScaleGridQuestion)
        {
            <thead>
                <tr>
                    <th></th>
                    <th colspan="@firstQuestion.Options.Count" class="likert-table__likert-text-container">
                        <div class="col-xs-4 text-left">@Html.Raw(firstQuestion.LikertLeftText)</div>
                        <div class="col-xs-4 text-center">@Html.Raw(firstQuestion.LikertCenterText)</div>
                        <div class="col-xs-4 text-right">@Html.Raw(firstQuestion.LikertRightText)</div>
                    </th>
                </tr>
            </thead>
        }
        @Html.GridTable(Model)
    </table>
}

@functions {
    string SetCssClassForQuestionType()
    {
        var cssClass = string.Empty;
        if (Model is ShortTextListQuestion)
            cssClass = "short-text-list";
        else if (Model is ScaleGridQuestion)
            cssClass = "likert-table";
        else if (Model is RatingGridQuestion)
            cssClass = "rating-table";
        else if (Model is LongTextListQuestion)
            cssClass = "long-text-list";

        return cssClass;
    }

    private string GetId(Option option)
    {
        return Model.Alias + "_" + option.Alias;
    }

    private string GetOptionClass(Option option)
    {
        if (option.IsExclusive) return "exclusive";
        if (option.IsNotApplicable) return "na";
        return "";
    }
}

@helper RenderAsList()
{
for (var i = 0; i < Model.Options.Count; i++)
{
    var question = Model.Questions[i];
        <div>
            <span>@Html.Raw(Model.Options[i].Text)</span>
            @{ Html.RenderPartial(string.Format("~/Views/Survey/_{0}Renderer.cshtml", question.GetType().Name), question, ViewData);
            }
        </div>
                }
}

@helper RenderSingleSelectionGridVertical()
{
    <div id="@Model.Alias-selection-grid-vertical">
        @for (var i = 0; i < Model.Questions.Count; i++)
        {
            var question = Model.Questions[i];
            var optionTopic = Model.Options[i];
            <div class="topic-option-grid">
                <div class="topic-option-grid__title">@optionTopic.Text</div>
            </div>
            @RenderSingleSelectionVertical(question as SingleSelectionQuestion)
        }
    </div>
}

@helper RenderMultipleSelectionGridVertical()
{
    <div id="@Model.Alias-selection-grid-vertical">
        @for (var i = 0; i < Model.Questions.Count; i++)
        {
            var question = Model.Questions[i];
            var optionTopic = Model.Options[i];
            <div class="topic-option-grid">
                <div class="topic-option-grid__title">@optionTopic.Text</div>
            </div>
            @RenderMultipleSelectionVertical(question as MultipleSelectionQuestion)
        }
    </div>
}


@helper RenderSingleSelectionVertical(SingleSelectionQuestion question)
{
    <div class="single-selection-container">
        @foreach (Option option in question.Options)
        {
            <label class="single-selection @(question.IsChecked(option) ? "selected" : "")">
                <span class="single-selection-option">

                    @Html.RadioButton(question.Alias, option.Alias, (question.IsChecked(option) ? new { @checked = "checked" } : (object)new { @id = GetId(option) }))

                    <span class="selection-option-title" title-id="@(question.Alias + option.Id)">@Html.Raw(option.Text)</span>
                </span>
            </label>
        }
    </div>
}

@helper RenderMultipleSelectionVertical(MultipleSelectionQuestion question)
{
    <div class="multi-selection-container">
        @foreach (Option option in question.Options)
        {
            <label class="multi-selection @(question.IsChecked(option) ? "selected" : "")">
                <span class="multi-selection-option @GetOptionClass(option)">
                    @Html.CheckBox(question.GetFieldName(option), question.IsChecked(option))
                    <span class="selection-option-title" title-id="@(question.Alias + option.Id)">@Html.Raw(option.Text)</span>
                </span>
            </label>
        }
    </div>
}